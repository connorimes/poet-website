diff --git a/Makefile b/Makefile
index bba61ef..5922760 100644
--- a/Makefile
+++ b/Makefile
@@ -1,18 +1,20 @@
 CC = gcc
-CFLAGS = -O2
+CFLAGS = -O2 -Wall
+LDFLAGS = 
+LIBS = -lpoet -lhb-acc-pow-shared -lhb-energy-msr -lpthread -lrt -lm
 
-FF = g77
+FF = gfortran
 FFLAGS = -O2
 
 all: stream_f.exe stream_c.exe
 
 stream_f.exe: stream.f mysecond.o
-	$(CC) $(CFLAGS) -c mysecond.c
+	$(CC) $(CFLAGS) -c mysecond.c $(LDFLAGS) $(LIBS)
 	$(FF) $(FFLAGS) -c stream.f
 	$(FF) $(FFLAGS) stream.o mysecond.o -o stream_f.exe
 
 stream_c.exe: stream.c
-	$(CC) $(CFLAGS) stream.c -o stream_c.exe
+	$(CC) $(CFLAGS) stream.c -o stream_c.exe $(LDFLAGS) $(LIBS)
 
 clean:
 	rm -f stream_f.exe stream_c.exe *.o
diff --git a/stream.c b/stream.c
index b9a2cee..128df29 100644
--- a/stream.c
+++ b/stream.c
@@ -41,6 +41,7 @@
 /*  5. Absolutely no warranty is expressed or implied.                   */
 /*-----------------------------------------------------------------------*/
 # include <stdio.h>
+# include <stdlib.h>
 # include <unistd.h>
 # include <math.h>
 # include <float.h>
@@ -105,11 +106,11 @@
  */
 #ifdef NTIMES
 #if NTIMES<=1
-#   define NTIMES	10
+#   define NTIMES	1000
 #endif
 #endif
 #ifndef NTIMES
-#   define NTIMES	10
+#   define NTIMES	1000
 #endif
 
 /*  Users are allowed to modify the "OFFSET" variable, which *may* change the
@@ -121,7 +122,7 @@
  *         code using, for example, "-DOFFSET=56".
  */
 #ifndef OFFSET
-#   define OFFSET	0
+#   define OFFSET	13
 #endif
 
 /*
@@ -176,6 +177,20 @@
 #define STREAM_TYPE double
 #endif
 
+#define HB_ENERGY_IMPL
+#include <heartbeats/hb-energy.h>
+#include <heartbeats/heartbeat-accuracy-power.h>
+#include <poet/poet.h>
+#include <poet/poet_config.h>
+
+#define PREFIX "STREAM"
+#define USE_POET // Power and performance control
+
+heartbeat_t* heart;
+poet_state* state;
+static poet_control_state_t* control_states;
+static poet_cpu_state_t* cpu_states;
+
 static STREAM_TYPE	a[STREAM_ARRAY_SIZE+OFFSET],
 			b[STREAM_ARRAY_SIZE+OFFSET],
 			c[STREAM_ARRAY_SIZE+OFFSET];
@@ -204,6 +219,73 @@ extern void tuned_STREAM_Triad(STREAM_TYPE scalar);
 #ifdef _OPENMP
 extern int omp_get_num_threads();
 #endif
+
+static inline void hb_poet_init() {
+    float min_heartrate;
+    float max_heartrate;
+    int window_size;
+    double power_target;
+    unsigned int nstates;
+
+    if(getenv(PREFIX"_MIN_HEART_RATE") == NULL) {
+      min_heartrate = 0.0;
+    } else {
+      min_heartrate = atof(getenv(PREFIX"_MIN_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_MAX_HEART_RATE") == NULL) {
+      max_heartrate = 100.0;
+    } else {
+      max_heartrate = atof(getenv(PREFIX"_MAX_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_WINDOW_SIZE") == NULL) {
+      window_size = 30;
+    } else {
+      window_size = atoi(getenv(PREFIX"_WINDOW_SIZE"));
+    }
+    if(getenv(PREFIX"_POWER_TARGET") == NULL) {
+      power_target = 70;
+    } else {
+      power_target = atof(getenv(PREFIX"_POWER_TARGET"));
+    }
+
+    printf("init heartbeat with %f %f %d\n", min_heartrate, max_heartrate, window_size);
+    heart = heartbeat_acc_pow_init(window_size, 100, "heartbeat.log",
+                                   min_heartrate, max_heartrate,
+                                   0, 100,
+                                   1, hb_energy_impl_alloc(), power_target, power_target);
+    if (heart == NULL) {
+      fprintf(stderr, "Failed to init heartbeat.\n");
+      exit(1);
+    }
+#ifdef USE_POET
+    if (get_control_states(NULL, &control_states, &nstates)) {
+      fprintf(stderr, "Failed to load control states.\n");
+      exit(1);
+    }
+    if (get_cpu_states(NULL, &cpu_states, &nstates)) {
+      fprintf(stderr, "Failed to load cpu states.\n");
+      exit(1);
+    }
+    state = poet_init(heart, nstates, control_states, cpu_states, &apply_cpu_config, &get_current_cpu_state, 1, "poet.log");
+    if (state == NULL) {
+      fprintf(stderr, "Failed to init poet.\n");
+      exit(1);
+    }
+#endif
+   printf("heartbeat init'd\n");
+
+}
+
+static inline void hb_poet_finish() {
+#ifdef USE_POET
+    poet_destroy(state);
+    free(control_states);
+    free(cpu_states);
+#endif
+    heartbeat_finish(heart);
+    printf("heartbeat finished\n");
+}
+
 int
 main()
     {
@@ -214,6 +296,8 @@ main()
     STREAM_TYPE		scalar;
     double		t, times[4][NTIMES];
 
+    hb_poet_init();
+
     /* --- SETUP --- determine precision and check timing --- */
 
     printf(HLINE);
@@ -306,6 +390,11 @@ main()
     scalar = 3.0;
     for (k=0; k<NTIMES; k++)
 	{
+	heartbeat_acc(heart, k, 1);
+#ifdef USE_POET
+	poet_apply_control(state);
+#endif
+
 	times[0][k] = mysecond();
 #ifdef TUNED
         tuned_STREAM_Copy();
@@ -375,6 +464,8 @@ main()
     checkSTREAMresults();
     printf(HLINE);
 
+    hb_poet_finish();
+
     return 0;
 }
 
