diff --git a/config/gcc-hooks-poet.bldconf b/config/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..149f333
--- /dev/null
+++ b/config/gcc-hooks-poet.bldconf
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+source ${PARSECDIR}/config/gcc-hooks.bldconf
+
+CFLAGS="${CFLAGS} -O2"
+CXXFLAGS="${CXXFLAGS} -O2"
+LDFLAGS="${LDFLAGS}"
+LIBS="${LIBS} -lpoet -lhb-acc-pow-shared -lhb-energy-msr -lrt -lstdc++"
diff --git a/pkgs/apps/blackscholes/parsec/gcc-hooks-poet.bldconf b/pkgs/apps/blackscholes/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..31cc997
--- /dev/null
+++ b/pkgs/apps/blackscholes/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/apps/blackscholes/parsec/gcc-hooks.bldconf
diff --git a/pkgs/apps/blackscholes/src/blackscholes.c b/pkgs/apps/blackscholes/src/blackscholes.c
index 559628d..0e4705b 100644
--- a/pkgs/apps/blackscholes/src/blackscholes.c
+++ b/pkgs/apps/blackscholes/src/blackscholes.c
@@ -16,6 +16,20 @@
 #include <hooks.h>
 #endif
 
+#define HB_ENERGY_IMPL
+#include <heartbeats/hb-energy.h>
+#include <heartbeats/heartbeat-accuracy-power.h>
+#include <poet/poet.h>
+#include <poet/poet_config.h>
+
+#define PREFIX "BLACKSCHOLES"
+#define USE_POET // Power and performance control
+
+heartbeat_t* heart;
+poet_state* state;
+static poet_control_state_t* control_states;
+static poet_cpu_state_t* cpu_states;
+
 // Multi-threaded pthreads header
 #ifdef ENABLE_THREADS
 // Add the following line so that icc 9.0 is compatible with pthread lib.
@@ -49,7 +63,7 @@ using namespace tbb;
 //Precision to use for calculations
 #define fptype float
 
-#define NUM_RUNS 100
+#define NUM_RUNS 400
 
 typedef struct OptionData_ {
         fptype s;          // spot price
@@ -77,6 +91,72 @@ fptype * otime;
 int numError = 0;
 int nThreads;
 
+static inline void hb_poet_init() {
+    float min_heartrate;
+    float max_heartrate;
+    int window_size;
+    double power_target;
+    unsigned int nstates;
+
+    if(getenv(PREFIX"_MIN_HEART_RATE") == NULL) {
+      min_heartrate = 0.0;
+    } else {
+      min_heartrate = atof(getenv(PREFIX"_MIN_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_MAX_HEART_RATE") == NULL) {
+      max_heartrate = 100.0;
+    } else {
+      max_heartrate = atof(getenv(PREFIX"_MAX_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_WINDOW_SIZE") == NULL) {
+      window_size = 30;
+    } else {
+      window_size = atoi(getenv(PREFIX"_WINDOW_SIZE"));
+    }
+    if(getenv(PREFIX"_POWER_TARGET") == NULL) {
+      power_target = 70;
+    } else {
+      power_target = atof(getenv(PREFIX"_POWER_TARGET"));
+    }
+
+    printf("init heartbeat with %f %f %d\n", min_heartrate, max_heartrate, window_size);
+    heart = heartbeat_acc_pow_init(window_size, 100, "heartbeat.log",
+                                   min_heartrate, max_heartrate,
+                                   0, 100,
+                                   1, hb_energy_impl_alloc(), power_target, power_target);
+    if (heart == NULL) {
+      fprintf(stderr, "Failed to init heartbeat.\n");
+      exit(1);
+    }
+#ifdef USE_POET
+    if (get_control_states(NULL, &control_states, &nstates)) {
+      fprintf(stderr, "Failed to load control states.\n");
+      exit(1);
+    }
+    if (get_cpu_states(NULL, &cpu_states, &nstates)) {
+      fprintf(stderr, "Failed to load cpu states.\n");
+      exit(1);
+    }
+    state = poet_init(heart, nstates, control_states, cpu_states, &apply_cpu_config, &get_current_cpu_state, 1, "poet.log");
+    if (state == NULL) {
+      fprintf(stderr, "Failed to init poet.\n");
+      exit(1);
+    }
+#endif
+   printf("heartbeat init'd\n");
+
+}
+
+static inline void hb_poet_finish() {
+#ifdef USE_POET
+    poet_destroy(state);
+    free(control_states);
+    free(cpu_states);
+#endif
+    heartbeat_finish(heart);
+    printf("heartbeat finished\n");
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
@@ -282,7 +362,7 @@ int bs_thread(void *tid_ptr) {
     int start = tid * (numOptions / nThreads);
     int end = start + (numOptions / nThreads);
 
-    for (j=0; j<NUM_RUNS; j++) {
+    //for (j=0; j<NUM_RUNS; j++) {
 #ifdef ENABLE_OPENMP
 #pragma omp parallel for private(i, price, priceDelta)
         for (i=0; i<numOptions; i++) {
@@ -306,7 +386,7 @@ int bs_thread(void *tid_ptr) {
             }
 #endif
         }
-    }
+    //}
 
     return 0;
 }
@@ -321,6 +401,8 @@ int main (int argc, char **argv)
     int * buffer2;
     int rv;
 
+    hb_poet_init();
+
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
@@ -434,15 +516,28 @@ int main (int argc, char **argv)
     free(threads);
     free(nums);
 #else
-    int *tids;
-    tids = (int *) malloc (nThreads * sizeof(int));
+    int j;
+    for (j=0; j<NUM_RUNS; j++) {
+        if(j > 10) {
+          heartbeat_acc(heart, j, 1);
+#ifdef USE_POET
+          poet_apply_control(state);
+#endif
+        }
 
-    for(i=0; i<nThreads; i++) {
-        tids[i]=i;
-        CREATE_WITH_ARG(bs_thread, &tids[i]);
+        // handle the pthreads ourselves to work around bug --CKI 2014-10-07
+        int *tids;
+        tids = (int *) malloc (nThreads * sizeof(int));
+        pthread_t threads[nThreads];
+        for(i=0; i < nThreads; i++) {
+            tids[i] = i;
+            pthread_create(&threads[i], NULL, (void *(*)(void *)) bs_thread, (void *) &tids[i]);
+        }
+        for (i = 0; i < nThreads; i++) {
+            pthread_join(threads[i], NULL);
+        }
+        free(tids);
     }
-    WAIT_FOR_END(nThreads);
-    free(tids);
 #endif //WIN32
 #else //ENABLE_THREADS
 #ifdef ENABLE_OPENMP
@@ -505,6 +600,8 @@ int main (int argc, char **argv)
     __parsec_bench_end();
 #endif
 
+    hb_poet_finish();
+
     return 0;
 }
 
diff --git a/pkgs/apps/bodytrack/parsec/gcc-hooks-poet.bldconf b/pkgs/apps/bodytrack/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..4cdbb73
--- /dev/null
+++ b/pkgs/apps/bodytrack/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/apps/bodytrack/parsec/gcc-hooks.bldconf
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp b/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp
index b25b18a..346c3cf 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp
@@ -65,9 +65,88 @@ using namespace tbb;
 #include "TrackingModel.h"
 #include "system.h"
 
+#define HB_ENERGY_IMPL
+#include <heartbeats/hb-energy.h>
+#include <heartbeats/heartbeat-accuracy-power.h>
+#include <poet/poet.h>
+#include <poet/poet_config.h>
+
+#define PREFIX "BODYTRACK"
+#define USE_POET // Power and performance control
+
+heartbeat_t* heart;
+poet_state* state;
+static poet_control_state_t* control_states;
+static poet_cpu_state_t* cpu_states;
 
 using namespace std;
 
+static inline void hb_poet_init() {
+    float min_heartrate;
+    float max_heartrate;
+    int window_size;
+    double power_target;
+    unsigned int nstates;
+
+    if(getenv(PREFIX"_MIN_HEART_RATE") == NULL) {
+      min_heartrate = 0.0;
+    } else {
+      min_heartrate = atof(getenv(PREFIX"_MIN_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_MAX_HEART_RATE") == NULL) {
+      max_heartrate = 100.0;
+    } else {
+      max_heartrate = atof(getenv(PREFIX"_MAX_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_WINDOW_SIZE") == NULL) {
+      window_size = 30;
+    } else {
+      window_size = atoi(getenv(PREFIX"_WINDOW_SIZE"));
+    }
+    if(getenv(PREFIX"_POWER_TARGET") == NULL) {
+      power_target = 70;
+    } else {
+      power_target = atof(getenv(PREFIX"_POWER_TARGET"));
+    }
+
+    printf("init heartbeat with %f %f %d\n", min_heartrate, max_heartrate, window_size);
+    heart = heartbeat_acc_pow_init(window_size, 100, "heartbeat.log",
+                                   min_heartrate, max_heartrate,
+                                   0, 100,
+                                   1, hb_energy_impl_alloc(), power_target, power_target);
+    if (heart == NULL) {
+      fprintf(stderr, "Failed to init heartbeat.\n");
+      exit(1);
+    }
+#ifdef USE_POET
+    if (get_control_states(NULL, &control_states, &nstates)) {
+      fprintf(stderr, "Failed to load control states.\n");
+      exit(1);
+    }
+    if (get_cpu_states(NULL, &cpu_states, &nstates)) {
+      fprintf(stderr, "Failed to load cpu states.\n");
+      exit(1);
+    }
+    state = poet_init(heart, nstates, control_states, cpu_states, &apply_cpu_config, &get_current_cpu_state, 1, "poet.log");
+    if (state == NULL) {
+      fprintf(stderr, "Failed to init poet.\n");
+      exit(1);
+    }
+#endif
+   printf("heartbeat init'd\n");
+
+}
+
+static inline void hb_poet_finish() {
+#ifdef USE_POET
+    poet_destroy(state);
+    free(control_states);
+    free(cpu_states);
+#endif
+    heartbeat_finish(heart);
+    printf("heartbeat finished\n");
+}
+
 //templated conversion from string
 template<class T>
 bool num(const string s, T &n)
@@ -190,7 +269,12 @@ int mainOMP(string path, int cameras, int frames, int particles, int layers, int
         __parsec_roi_begin();
 #endif
 	for(int i = 0; i < frames; i++)														//process each set of frames
-	{	cout << "Processing frame " << i << endl;
+	{
+		heartbeat_acc(heart, i, 1.0);
+#if defined(USE_POET)
+		poet_apply_control(state);
+#endif
+		cout << "Processing frame " << i << endl;
 		if(!pf.Update((float)i))														//Run particle filter step
 		{	cout << "Error loading observation data" << endl;
 			return 0;
@@ -251,7 +335,12 @@ int mainPthreads(string path, int cameras, int frames, int particles, int layers
         __parsec_roi_begin();
 #endif
 	for(int i = 0; i < frames; i++)														//process each set of frames
-	{	cout << "Processing frame " << i << endl;
+	{
+		heartbeat_acc(heart, i, 1.0);
+#if defined(USE_POET)
+		poet_apply_control(state);
+#endif
+		cout << "Processing frame " << i << endl;
 		if(!pf.Update((float)i))														//Run particle filter step
 		{	cout << "Error loading observation data" << endl;
 			workers.JoinAll();
@@ -348,7 +437,12 @@ int mainSingleThread(string path, int cameras, int frames, int particles, int la
         __parsec_roi_begin();
 #endif
 	for(int i = 0; i < frames; i++)														//process each set of frames
-	{	cout << "Processing frame " << i << endl;
+	{
+		heartbeat_acc(heart, i, 1.0);
+#if defined(USE_POET)
+		poet_apply_control(state);
+#endif
+		cout << "Processing frame " << i << endl;
 		if(!pf.Update((float)i))														//Run particle filter step
 		{	cout << "Error loading observation data" << endl;
 			return 0;
@@ -371,6 +465,8 @@ int main(int argc, char **argv)
 	bool OutputBMP;
 	int cameras, frames, particles, layers, threads, threadModel;								//process command line parameters to get path, cameras, and frames
 
+	hb_poet_init();
+
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
@@ -449,6 +545,8 @@ int main(int argc, char **argv)
 			break;
 	}
 
+	hb_poet_finish();
+
 #if defined(ENABLE_PARSEC_HOOKS)
         __parsec_bench_end();
 #endif
diff --git a/pkgs/apps/facesim/parsec/gcc-hooks-poet.bldconf b/pkgs/apps/facesim/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..38b3455
--- /dev/null
+++ b/pkgs/apps/facesim/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/apps/facesim/parsec/gcc-hooks.bldconf
diff --git a/pkgs/apps/facesim/src/Benchmarks/facesim/main.cpp b/pkgs/apps/facesim/src/Benchmarks/facesim/main.cpp
index 1c4c8d0..e6bc292 100644
--- a/pkgs/apps/facesim/src/Benchmarks/facesim/main.cpp
+++ b/pkgs/apps/facesim/src/Benchmarks/facesim/main.cpp
@@ -14,6 +14,20 @@
 #include <hooks.h>
 #endif
 
+#define HB_ENERGY_IMPL
+#include <heartbeats/hb-energy.h>
+#include <heartbeats/heartbeat-accuracy-power.h>
+#include <poet/poet.h>
+#include <poet/poet_config.h>
+
+#define PREFIX "FACESIM"
+#define USE_POET // Power and performance control
+
+heartbeat_t* heart;
+poet_state* state;
+static poet_control_state_t* control_states;
+static poet_cpu_state_t* cpu_states;
+
 using namespace PhysBAM;
 
 #ifdef ENABLE_PTHREADS
@@ -24,6 +38,72 @@ bool PHYSBAM_THREADED_RUN = true;
 bool PHYSBAM_THREADED_RUN = false;
 #endif //ENABLE_PTHREADS
 
+static inline void hb_poet_init() {
+    float min_heartrate;
+    float max_heartrate;
+    int window_size;
+    double power_target;
+    unsigned int nstates;
+
+    if(getenv(PREFIX"_MIN_HEART_RATE") == NULL) {
+      min_heartrate = 0.0;
+    } else {
+      min_heartrate = atof(getenv(PREFIX"_MIN_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_MAX_HEART_RATE") == NULL) {
+      max_heartrate = 100.0;
+    } else {
+      max_heartrate = atof(getenv(PREFIX"_MAX_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_WINDOW_SIZE") == NULL) {
+      window_size = 30;
+    } else {
+      window_size = atoi(getenv(PREFIX"_WINDOW_SIZE"));
+    }
+    if(getenv(PREFIX"_POWER_TARGET") == NULL) {
+      power_target = 70;
+    } else {
+      power_target = atof(getenv(PREFIX"_POWER_TARGET"));
+    }
+
+    printf("init heartbeat with %f %f %d\n", min_heartrate, max_heartrate, window_size);
+    heart = heartbeat_acc_pow_init(window_size, 100, "heartbeat.log",
+                                   min_heartrate, max_heartrate,
+                                   0, 100,
+                                   1, hb_energy_impl_alloc(), power_target, power_target);
+    if (heart == NULL) {
+      fprintf(stderr, "Failed to init heartbeat.\n");
+      exit(1);
+    }
+#ifdef USE_POET
+    if (get_control_states(NULL, &control_states, &nstates)) {
+      fprintf(stderr, "Failed to load control states.\n");
+      exit(1);
+    }
+    if (get_cpu_states(NULL, &cpu_states, &nstates)) {
+      fprintf(stderr, "Failed to load cpu states.\n");
+      exit(1);
+    }
+    state = poet_init(heart, nstates, control_states, cpu_states, &apply_cpu_config, &get_current_cpu_state, 1, "poet.log");
+    if (state == NULL) {
+      fprintf(stderr, "Failed to init poet.\n");
+      exit(1);
+    }
+#endif
+   printf("heartbeat init'd\n");
+
+}
+
+static inline void hb_poet_finish() {
+#ifdef USE_POET
+    poet_destroy(state);
+    free(control_states);
+    free(cpu_states);
+#endif
+    heartbeat_finish(heart);
+    printf("heartbeat finished\n");
+}
+
 int main (int argc, char* argv[])
 {
 #ifdef PARSEC_VERSION
@@ -82,6 +162,8 @@ int main (int argc, char* argv[])
 		exit (1);
 	}
 
+	hb_poet_init();
+
 	THREAD_DIVISION_PARAMETERS<float>& parameters = *THREAD_DIVISION_PARAMETERS<float>::Singleton();
 	parameters.grid_divisions_3d = VECTOR_3D<int> (5, 5, 5);
 
@@ -91,6 +173,8 @@ int main (int argc, char* argv[])
 
 	delete (THREAD_POOL::Singleton());
 
+	hb_poet_finish();
+
 #ifdef ENABLE_PARSEC_HOOKS
 	__parsec_bench_end();
 #endif
diff --git a/pkgs/apps/facesim/src/Public_Library/Solids_And_Fluids/SOLIDS_FLUIDS_DRIVER.cpp b/pkgs/apps/facesim/src/Public_Library/Solids_And_Fluids/SOLIDS_FLUIDS_DRIVER.cpp
index 3179c4c..5e65ffa 100644
--- a/pkgs/apps/facesim/src/Public_Library/Solids_And_Fluids/SOLIDS_FLUIDS_DRIVER.cpp
+++ b/pkgs/apps/facesim/src/Public_Library/Solids_And_Fluids/SOLIDS_FLUIDS_DRIVER.cpp
@@ -9,6 +9,13 @@
 #ifdef ENABLE_PARSEC_HOOKS
 #include <hooks.h>
 #endif
+
+#include <heartbeats/heartbeat-accuracy-power.h>
+#include <poet/poet.h>
+extern heartbeat_t* heart;
+extern poet_state* state;
+#define USE_POET // Power and performance control
+
 using namespace PhysBAM;
 //#####################################################################
 // Function Execute_Main_Program
@@ -58,6 +65,10 @@ Simulate_To_Frame (const int frame_input)
 	while (current_frame < frame_input)
 	{
 		LOG::Push_Scope ("FRAME", "Frame %d", current_frame + 1);
+		heartbeat_acc(heart, current_frame, 1);
+#ifdef USE_POET
+		poet_apply_control(state);
+#endif
 		Preprocess_Frame (current_frame + 1);
 		Advance_To_Target_Time (Time_At_Frame (current_frame + 1));
 		Postprocess_Frame (++current_frame);
diff --git a/pkgs/apps/ferret/parsec/gcc-hooks-poet.bldconf b/pkgs/apps/ferret/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..13b8864
--- /dev/null
+++ b/pkgs/apps/ferret/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/apps/ferret/parsec/gcc-hooks.bldconf
diff --git a/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c b/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
index 06b3d9c..06fec5b 100644
--- a/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
+++ b/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
@@ -37,6 +37,20 @@ Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 #include <hooks.h>
 #endif
 
+#define HB_ENERGY_IMPL
+#include <heartbeats/hb-energy.h>
+#include <heartbeats/heartbeat-accuracy-power.h>
+#include <poet/poet.h>
+#include <poet/poet_config.h>
+
+#define PREFIX "FERRET"
+#define USE_POET // Power and performance control
+
+heartbeat_t* heart;
+poet_state* state;
+static poet_control_state_t* control_states;
+static poet_cpu_state_t* cpu_states;
+
 #define DEFAULT_DEPTH	25
 #define MAXR	100
 #define IMAGE_DIM	14
@@ -112,6 +126,71 @@ struct rank_data
 
 struct queue q_rank_out;
 
+static inline void hb_poet_init() {
+    float min_heartrate;
+    float max_heartrate;
+    int window_size;
+    double power_target;
+    unsigned int nstates;
+
+    if(getenv(PREFIX"_MIN_HEART_RATE") == NULL) {
+      min_heartrate = 0.0;
+    } else {
+      min_heartrate = atof(getenv(PREFIX"_MIN_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_MAX_HEART_RATE") == NULL) {
+      max_heartrate = 100.0;
+    } else {
+      max_heartrate = atof(getenv(PREFIX"_MAX_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_WINDOW_SIZE") == NULL) {
+      window_size = 30;
+    } else {
+      window_size = atoi(getenv(PREFIX"_WINDOW_SIZE"));
+    }
+    if(getenv(PREFIX"_POWER_TARGET") == NULL) {
+      power_target = 70;
+    } else {
+      power_target = atof(getenv(PREFIX"_POWER_TARGET"));
+    }
+
+    printf("init heartbeat with %f %f %d\n", min_heartrate, max_heartrate, window_size);
+    heart = heartbeat_acc_pow_init(window_size, 100, "heartbeat.log",
+                                   min_heartrate, max_heartrate,
+                                   0, 100,
+                                   1, hb_energy_impl_alloc(), power_target, power_target);
+    if (heart == NULL) {
+      fprintf(stderr, "Failed to init heartbeat.\n");
+      exit(1);
+    }
+#ifdef USE_POET
+    if (get_control_states(NULL, &control_states, &nstates)) {
+      fprintf(stderr, "Failed to load control states.\n");
+      exit(1);
+    }
+    if (get_cpu_states(NULL, &cpu_states, &nstates)) {
+      fprintf(stderr, "Failed to load cpu states.\n");
+      exit(1);
+    }
+    state = poet_init(heart, nstates, control_states, cpu_states, &apply_cpu_config, &get_current_cpu_state, 1, "poet.log");
+    if (state == NULL) {
+      fprintf(stderr, "Failed to init poet.\n");
+      exit(1);
+    }
+#endif
+   printf("heartbeat init'd\n");
+
+}
+
+static inline void hb_poet_finish() {
+#ifdef USE_POET
+    poet_destroy(state);
+    free(control_states);
+    free(cpu_states);
+#endif
+    heartbeat_finish(heart);
+    printf("heartbeat finished\n");
+}
 
 /* ------- The Helper Functions ------- */
 int cnt_enqueue;
@@ -375,6 +454,7 @@ void *t_rank (void *dummy)
 void *t_out (void *dummy)
 {
 	struct rank_data *rank;
+	int count;
 	while (1)
 	{
 		if(dequeue(&q_rank_out, &rank) < 0)
@@ -399,6 +479,14 @@ void *t_out (void *dummy)
 		free(rank->name);
 		free(rank);
 
+		if(count % 10 == 0) {
+			heartbeat_acc(heart, cnt_dequeue,1);
+#ifdef USE_POET
+			poet_apply_control(state);
+#endif
+		}
+		count++;
+
 		cnt_dequeue++;
 		
 		fprintf(stderr, "(%d,%d)\n", cnt_enqueue, cnt_dequeue);
@@ -428,6 +516,8 @@ int main (int argc, char *argv[])
 
 	int ret, i;
 
+	hb_poet_init();
+
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
@@ -596,6 +686,8 @@ int main (int argc, char *argv[])
 
 	fclose(fout);
 
+	hb_poet_finish();
+
 #ifdef ENABLE_PARSEC_HOOKS
 	__parsec_bench_end();
 #endif
diff --git a/pkgs/apps/x264/parsec/gcc-hooks-poet.bldconf b/pkgs/apps/x264/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..2899b79
--- /dev/null
+++ b/pkgs/apps/x264/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/apps/x264/parsec/gcc-hooks.bldconf
diff --git a/pkgs/apps/x264/src/x264.c b/pkgs/apps/x264/src/x264.c
index 5b740e0..1799edc 100644
--- a/pkgs/apps/x264/src/x264.c
+++ b/pkgs/apps/x264/src/x264.c
@@ -47,6 +47,20 @@
 #include <hooks.h>
 #endif
 
+#define HB_ENERGY_IMPL
+#include <heartbeats/hb-energy.h>
+#include <heartbeats/heartbeat-accuracy-power.h>
+#include <poet/poet.h>
+#include <poet/poet_config.h>
+
+#define PREFIX "X264"
+#define USE_POET // Power and performance control
+
+heartbeat_t* heart;
+poet_state* state;
+static poet_control_state_t* control_states;
+static poet_cpu_state_t* cpu_states;
+
 uint8_t *mux_buffer = NULL;
 int mux_buffer_size = 0;
 
@@ -85,6 +99,71 @@ static void Help( x264_param_t *defaults, int b_longhelp );
 static int  Parse( int argc, char **argv, x264_param_t *param, cli_opt_t *opt );
 static int  Encode( x264_param_t *param, cli_opt_t *opt );
 
+static inline void hb_poet_init() {
+    float min_heartrate;
+    float max_heartrate;
+    int window_size;
+    double power_target;
+    unsigned int nstates;
+
+    if(getenv(PREFIX"_MIN_HEART_RATE") == NULL) {
+      min_heartrate = 0.0;
+    } else {
+      min_heartrate = atof(getenv(PREFIX"_MIN_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_MAX_HEART_RATE") == NULL) {
+      max_heartrate = 100.0;
+    } else {
+      max_heartrate = atof(getenv(PREFIX"_MAX_HEART_RATE"));
+    }
+    if(getenv(PREFIX"_WINDOW_SIZE") == NULL) {
+      window_size = 30;
+    } else {
+      window_size = atoi(getenv(PREFIX"_WINDOW_SIZE"));
+    }
+    if(getenv(PREFIX"_POWER_TARGET") == NULL) {
+      power_target = 70;
+    } else {
+      power_target = atof(getenv(PREFIX"_POWER_TARGET"));
+    }
+
+    printf("init heartbeat with %f %f %d\n", min_heartrate, max_heartrate, window_size);
+    heart = heartbeat_acc_pow_init(window_size, 100, "heartbeat.log",
+                                   min_heartrate, max_heartrate,
+                                   0, 100,
+                                   1, hb_energy_impl_alloc(), power_target, power_target);
+    if (heart == NULL) {
+      fprintf(stderr, "Failed to init heartbeat.\n");
+      exit(1);
+    }
+#ifdef USE_POET
+    if (get_control_states(NULL, &control_states, &nstates)) {
+      fprintf(stderr, "Failed to load control states.\n");
+      exit(1);
+    }
+    if (get_cpu_states(NULL, &cpu_states, &nstates)) {
+      fprintf(stderr, "Failed to load cpu states.\n");
+      exit(1);
+    }
+    state = poet_init(heart, nstates, control_states, cpu_states, &apply_cpu_config, &get_current_cpu_state, 1, "poet.log");
+    if (state == NULL) {
+      fprintf(stderr, "Failed to init poet.\n");
+      exit(1);
+    }
+#endif
+   printf("heartbeat init'd\n");
+
+}
+
+static inline void hb_poet_finish() {
+#ifdef USE_POET
+    poet_destroy(state);
+    free(control_states);
+    free(cpu_states);
+#endif
+    heartbeat_finish(heart);
+    printf("heartbeat finished\n");
+}
 
 /****************************************************************************
  * main:
@@ -95,6 +174,8 @@ int main( int argc, char **argv )
     cli_opt_t opt;
     int ret;
 
+    hb_poet_init();
+
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
@@ -138,6 +219,8 @@ int main( int argc, char **argv )
     __parsec_bench_end();
 #endif
 
+    hb_poet_finish();
+
     return ret;
 }
 
@@ -873,6 +956,13 @@ static int  Encode( x264_param_t *param, cli_opt_t *opt )
 
         i_frame++;
 
+        if(i_frame >= 12) {
+	    heartbeat_acc(heart, i_frame, i_file);
+#ifdef USE_POET
+            poet_apply_control(state);
+#endif
+        }
+
         /* update status line (up to 1000 times per input file) */
         if( opt->b_progress && i_frame % i_update_interval == 0 )
         {
diff --git a/pkgs/libs/gsl/parsec/gcc-hooks-poet.bldconf b/pkgs/libs/gsl/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..1c0d89f
--- /dev/null
+++ b/pkgs/libs/gsl/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/libs/gsl/parsec/gcc-hooks.bldconf
diff --git a/pkgs/libs/hooks/parsec/gcc-hooks-poet.bldconf b/pkgs/libs/hooks/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..7f6517f
--- /dev/null
+++ b/pkgs/libs/hooks/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/libs/hooks/parsec/gcc-hooks.bldconf
diff --git a/pkgs/libs/hooks/src/Makefile b/pkgs/libs/hooks/src/Makefile
index f31819b..cbaddbc 100644
--- a/pkgs/libs/hooks/src/Makefile
+++ b/pkgs/libs/hooks/src/Makefile
@@ -10,6 +10,6 @@
 # distribution. You also need to make sure that the shared library can be
 # found at run time. The PARSEC framework already takes care of this.
 
-#include Makefile.static
-include Makefile.shared
+include Makefile.static
+#include Makefile.shared
 
diff --git a/pkgs/libs/libjpeg/parsec/gcc-hooks-poet.bldconf b/pkgs/libs/libjpeg/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..5c169ad
--- /dev/null
+++ b/pkgs/libs/libjpeg/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/libs/libjpeg/parsec/gcc-hooks.bldconf
diff --git a/pkgs/tools/libtool/parsec/gcc-hooks-poet.bldconf b/pkgs/tools/libtool/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..00e46e7
--- /dev/null
+++ b/pkgs/tools/libtool/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/tools/libtool/parsec/gcc-hooks.bldconf
diff --git a/pkgs/tools/yasm/parsec/gcc-hooks-poet.bldconf b/pkgs/tools/yasm/parsec/gcc-hooks-poet.bldconf
new file mode 100644
index 0000000..e6a35d8
--- /dev/null
+++ b/pkgs/tools/yasm/parsec/gcc-hooks-poet.bldconf
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+source ${PARSECDIR}/pkgs/tools/yasm/parsec/gcc-hooks.bldconf
